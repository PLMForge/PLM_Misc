<AML>
 <Item type="Method" id="E151137A654D47368C10471A6C90AF03" action="add">
  <comments>Customized workflow history to fix sort order</comments>
  <execution_allowed_to keyed_name="World" type="Identity">A73B655731924CD0B027E4F4D5FCC0A9</execution_allowed_to>
  <method_code><![CDATA[// This method generates the query for a Workflow History Report
const innovator = new Innovator();
let topWfp = new Innovator();
let fullWfp = new Innovator();
topWfp = getTopFlow(this); // get the top_level process
// Call Routines to build entire AML
const itemId = topWfp.getAttribute('item_id_for_vote_now_link');
fullWfp = getWfpItem(topWfp);
fullWfp = getSubFlow(fullWfp, itemId);
// ******Transform and display AML*****
const report = innovator.getItemByKeyedName('Report','FRG_Workflow Process History');
const style = report.getProperty('xsl_stylesheet');
const html = fullWfp.applyStylesheet(style,'text');
return html;
// *************
// Find the top_level of the workflow process. Walk up subflows
function getTopFlow(WfpItem) {
	let parentActivityID = WfpItem.getProperty('sub_of');
	if (parentActivityID) {
		while (parentActivityID) {
			WfpItem = getParentFlow(parentActivityID);
			if (WfpItem) {
				parentActivityID = WfpItem.getProperty('sub_of');
			} else {
				parentActivityID = null;
			}
		}
	} else {
		return WfpItem;
	}
	return WfpItem;
}// end function

// Check to see if a subflow.  If subflow, find parent flow
function getParentFlow(parentActivityID) {
	if (parentActivityID) {
		let wpaRel = new Item('Workflow Process Activity','get');
		wpaRel.setProperty('related_id',parentActivityID);
		wpaRel = wpaRel.apply();
		if (wpaRel) {
			let nextWfp = new Item('Workflow Process','get');
			nextWfp.setProperty('id', wpaRel.getProperty('source_id'));
			nextWfp = nextWfp.apply();
			return nextWfp;
		}
	} else {
		return;
	}
}// end function

function getWfpItem(topWfp) {
	const innovator = new Innovator();
	const qryItem = innovator.newItem();
	qryItem.loadAML(
	'<Item type="Workflow Process" id="' + topWfp.getID() +
	'" initial_action="get" action="do_l10n" select="active_date, closed_date, state, name, description, created_by_id,sub_of" >' +
	'  <created_by_id>' +
	'    <Item type="User" select="first_name,last_name" action="get">' +
	'      <Relationships>' +
	'        <Item type="Alias" action="get" select="related_id(name)"/>' +
	'      </Relationships>' +
	'    </Item>' +
	'  </created_by_id>' +
	'  <Relationships>' +
	'    <Item type="Workflow Process Activity" action="get" select="related_id">' +
	'      <related_id>' +
	'      <Item type="Activity" action="get" select="label,name,state,active_date,subflow(name)">' +
	'        <and>' +
	'          <state condition="ne">Pending</state>' +
	'          <or>' +
	'              <is_start condition="ne">1</is_start>' +
	'              <is_auto condition="ne">1</is_auto>' +
	'          </or>' +
	'          <or>' +
	'              <is_end condition="ne">1</is_end>' +
	'              <is_auto condition="ne">1</is_auto>' +
	'          </or>' +
	'        </and>' +
	'				<Relationships>' +
	'					<Item type="Activity Assignment" action="get" select="closed_by, is_disabled, closed_on, comments, path, related_id(name, is_alias), created_on" >' +
	'            <closed_by>' +
	'              <Item type="User" select="first_name,last_name" action="get">' +
	'                <Relationships>' +
	'                  <Item type="Alias" action="get" select="related_id(name)"/>' +
	'                </Relationships>' +
	'              </Item>' +
	'            </closed_by>' +
	'           <related_id>' +
	'               <Item type="Identity" action="get">' +
	'                   <Relationships>' + 
	'                       <Item action="get" type="Member" select="related_id(name)"></Item>' +
	'                   </Relationships>' +
	'               </Item>' +
	'           </related_id>' +
	'          </Item>' +
	'        </Relationships>' +
	'      </Item>' +
	'      </related_id>' +
	'    </Item>' +
	'  </Relationships>' +
	'</Item>'
	);

	const resultItem = qryItem.apply();
	if (resultItem.isError()) {
		alert(resultItem.getErrorDetail());
		return;
	}
	if (topWfp.getAttribute('item_id_for_vote_now_link')) {
		const asmntItems = resultItem.getItemsByXPath('//Item[@type=\'Workflow Process Activity\' and related_id/Item[state=' +
			'\'Active\']]/related_id/Item/Relationships/Item[@type=\'Activity Assignment\' and string(closed_on)=\'\' and is_disabled=\'0\']/related_id/Item');
		let idensList = aras.getIdentityList();
		if (!idensList) {
			idensList = '';
		}
		for (let i = 0; i < asmntItems.getItemCount(); i++) {
			const itm = asmntItems.getItemByIndex(i);
			if (idensList.indexOf(itm.getAttribute('id')) > -1) {
				itm.node.parentNode.parentNode.setAttribute('item_id_for_vote_now_link', topWfp.getAttribute('item_id_for_vote_now_link'));
			}
		}
	}
	return resultItem;
} // end function

function getSubFlow(WfpItem, itemId) {
	const ActivityItems = WfpItem.getItemsByXPath('//Item[@type=\'Activity\']');
	const count = ActivityItems.getItemCount();
	// Iterate over the Activity Items and find one ones with SubFlow.
	for (let i = 0; i < count; ++i) {
		let Activity = ActivityItems.getItemByIndex(i);
		if (Activity.getProperty('subflow')) {
			const subWfpItem = new Innovator();
			Activity = getSubActivity(Activity,itemId);  // returns the activity with appended subflow process(es)
		}
	}
	return WfpItem;
} // end function

// For an activity with subflow, get the subflow process
function getSubActivity(Activity, itemId) {
	const ActivityID = Activity.getID();
	let subWfprocess = new Item('Workflow Process','get');
	subWfprocess.setProperty('sub_of',ActivityID);
	subWfprocess = subWfprocess.apply();
	if (itemId) {
		subWfprocess.setAttribute('item_id_for_vote_now_link', itemId);
	}
	subWfprocess = getWfpItem(subWfprocess); // Get the required subflow Item AML
	subWfprocess =  getSubFlow(subWfprocess,itemId); // Loop with subWfprocess to build subflow structure
	Activity.addRelationship(subWfprocess); // Add the subflow structure under the Activity calling it
	return Activity;
} // end function
]]></method_code>
  <method_type>JavaScript</method_type>
  <name>FRG_Workflow History Report</name>
 </Item>
</AML>